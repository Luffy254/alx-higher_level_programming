*****************************
* Test cases for MyList class *
*****************************

* Importing the function from the module
>>> MyList = __import__("1-my_list").MyList

* Check for module docstring
>>> mod = __import__("1-my_list").__doc__
>>> len(mod) > 1
True

* Check for class docstring:
>>> cl = __import__("1-my_list").MyList.__doc__
>>> len(cl) > 1
True

* Check for method docstring:
>>> meth = __import__("1-my_list").MyList.print_sorted.__doc__
>>> len(meth) > 1
True


* Test case 1: Check if an empty list is sorted correctly
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

* Test case 1:(check if print_sorted() sorts the list in ascending order)
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(4)
>>> my_list.append(1)
>>> my_list.append(3)
>>> my_list.append(2)
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]


* Test case 3: Check if a single-element list is sorted correctly
>>> my_list = MyList()
>>> my_list.append(33)
>>> my_list.print_sorted()
[33]

* Test case 4: Check if a list with duplicate elements is sorted correctly
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(2)
>>> my_list.print_sorted()
[1, 2, 2, 3, 3]

* Test case 6: Check if an already sorted list remains unchanged
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(4)
>>> my_list.append(5)
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

* Test case 7: check negative numbers are sorted correctly
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(1)
>>> my_list.append(-1)
>>> my_list.append(2)
>>> my_list.append(-2)
>>> my_list.print_sorted()
[-2, -1, 1, 2, 3]
